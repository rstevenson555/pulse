/* Generated by Together */

package com.bos.actions;
//  java

import com.bcop.arch.logger.Logger;
import com.bos.helper.HtmlPageHelper;
import com.bos.helper.HtmlPageHelperResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
/**
 * This action class is used for the Main screen.<Br>
 */

public class PageIview extends BaseAction {

	public static final String HTML_PAGE="HtmlPage";
	static {
		logger =
			(Logger) Logger.getLogger(PageIview.class.getName());
	}
	
    public static void main(String[] args) {
        String page = "<html><css href=\"menus.css\"><a /><img src=\"pic.jpg\">";
        page = page.replaceAll("href=\"(.*?)\"", "href=\"http://maxbuyer.officemax.com/shop/$1\"");
        page = page.replaceAll("src=\"(.*?)\"", "href=\"http://maxbuyer.officemax.com/shop/$1\"");
        System.out.println(page);
    }
	
	/**
	 * Process the specified HTTP request, and create the corresponding HTTP
	 * response (or forward to another web component that will create it).
	 * Return an <code>ActionForward</code> instance describing where and how
	 * control should be forwarded, or <code>null</code> if the response has already been completed.
	 * @param mapping    - The ActionMapping used to select this instance
	 * @param actionForm - The optional ActionForm bean for this request (if any)
	 * @param request    - The HTTP request we are processing
	 * @param response   - The HTTP response we are creating
	 * @exception Exception if business logic throws an exception
	 * @return - returns the ActionForward.
	 */
	public ActionForward processAction(ActionMapping mapping,ActionForm actionForm,HttpServletRequest request,HttpServletResponse response) {
		ActionForward actionForward=null;
		actionForward = mapping.findForward("success");

        String pageid = request.getParameter("HtmlPage_ID");
                
        HtmlPageHelper pageHelper = new HtmlPageHelper();        
        //String page = pageHelper.getPage(pageid);
        HtmlPageHelperResponse pageResponse = pageHelper.getPage(pageid);
        String page = pageResponse.getPage();
        
        Document doc = Jsoup.parse(page); 
        parseDoc(doc);
        page = doc.toString();        
        
        request.setAttribute(HTML_PAGE, page);

		return actionForward;
	}
	
	/**
 	 * Scan the entire HTML page and convert the proper <code>src</code> and <code>href</code>
     * attributes from relative paths to absolute paths.
     * parseDoc() begins by determining if this page belongs to B2B or B2C. This is accomplished by
     * checking which style sheet is being used since it is unique on both sites.
     * The default domain is set to officemax.com, however, if we find that "defaultStyle.css" is
     * referenced in any of the <code>link</code> tags, we can assume the domain is maxbuyer.officemax.com.
     * Finally, we retrieve every link, img, and input element that contains a <code>src</code> and/or 
     * <code>href</code> attribute. If the attribute is already an absolute path, do not modify it. 
     * If it is relative, then we pre-append the domain string to it
     * 
     * @author I081299
	 * @param doc    - The page used to read elements and make modifications on these elements
	 */	
	private void parseDoc(Document doc) {
		String domain = "http://www.officemax.com/";
		
		// Retrieve page elements
        Elements headElement = doc.getElementsByTag("head");
        Elements linkElements = headElement.get(0).getElementsByTag("link");
        Elements imgElements = doc.getElementsByTag("img");
        Elements inputElements = doc.getElementsByTag("input");
        Elements scriptElements = doc.getElementsByTag("script");
        Elements anchorElements = doc.getElementsByTag("a");
      
	    // Scan link elements to see if "defaultStyle.css" is being referenced
        // then, trim whitespace and convert to absolute path
	    for (int i = 0; i < linkElements.size(); i++) {
	    	if (linkElements.get(i).attr("href").equals("defaultStyle.css"))
	            domain = "http://maxbuyer.officemax.com/shop/"; 
	    	
	    	Element linkElement = linkElements.get(i);
	    	if (!linkElement.attr("href").startsWith("http"))
	        	linkElement.attr("href", domain + linkElement.attr("href").trim());
	    }
	    
        // For each element with 'img' tag, trim whitespace and convert to absolute path
        for (int i = 0; i < imgElements.size(); i++) {
	     	Element imgElement = imgElements.get(i);
	     	if (!imgElement.attr("src").startsWith("http"))
	        	imgElement.attr("src", domain + imgElement.attr("src").trim());
        }
        
        // For each element with 'input' tag, trim whitespace and convert to absolute path
        for (int i = 0; i < inputElements.size(); i++) {
        	Element inputElement = inputElements.get(i);
        	if (!inputElement.attr("src").startsWith("http"))
        		inputElement.attr("src", domain + inputElement.attr("src").trim());
        }
        
        // For each script element, check if there is a src attribute and set it to an empty string
        for (int i = 0; i < scriptElements.size(); i++) {
        	Element scriptElement = scriptElements.get(i);
        	if (!scriptElement.attr("src").equals("")) {
        		scriptElement.attr("src", "javascript:void(0)");
        	}        		
    	}

        // For each anchor element, check if there is a src attribute and set it to an empty string
        for (int i = 0; i < anchorElements.size(); i++) {
        	Element anchorElement = anchorElements.get(i);
        	if (!anchorElement.attr("href").equals("")) {
        		anchorElement.attr("href", "javascript:void(0)");
        		anchorElement.attr("onclick", "javascript:void(0)");
        	}        		
    	}
	}
}

