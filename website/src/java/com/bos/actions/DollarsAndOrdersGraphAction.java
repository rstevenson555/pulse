/* Generated by Eric */

package com.bos.actions;
//  java
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import com.bcop.arch.logger.Logger;
import com.bos.helper.DollarsAndOrdersHelper;

/**
 * This action class is used for the Main screen.<Br>
 */

public class DollarsAndOrdersGraphAction extends BaseAction {

	public static final String GRAPH="JFreeGraph";
	static {
		logger =
			(Logger) Logger.getLogger(DollarsAndOrdersGraphAction.class.getName());
	}
	
	/**
	 * Process the specified HTTP request, and create the corresponding HTTP
	 * response (or forward to another web component that will create it).
	 * Return an <code>ActionForward</code> instance describing where and how
	 * control should be forwarded, or <code>null</code> if the response has already been completed.
	 * @param mapping    - The ActionMapping used to select this instance
	 * @param actionForm - The optional ActionForm bean for this request (if any)
	 * @param request    - The HTTP request we are processing
	 * @param response   - The HTTP response we are creating
	 * @exception Exception if business logic throws an exception
	 * @return - returns the ActionForward.
	 */
	public ActionForward processAction(
	ActionMapping mapping,
	ActionForm actionForm,
	HttpServletRequest request,
	HttpServletResponse response) {
		ActionForward actionForward=null;
		String forwardString = "error";
		String requestId = null;
        actionForward = mapping.findForward("success");
		//run XMLBuilder
		String selectedDate = request.getParameter("selectedDate");
		String graphType = request.getParameter("graphType");
		String currDateString = "", prevDateString = "";
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyyMMdd");
		DateTime currDateTime = null, 
				 prevDateTime = null;
		
        if(selectedDate != null && !selectedDate.equals("")) {    	        	
        	currDateTime = formatter.parseDateTime(selectedDate);
        	prevDateTime = currDateTime.minusMonths(3);
        } else {
        	currDateTime = new DateTime();
        	prevDateTime = currDateTime.minusMonths(3);     	        	
        }
        
        currDateString = currDateTime.toString(formatter);       	
        prevDateString = prevDateTime.toString(formatter);        
        DollarsAndOrdersHelper daoh = new DollarsAndOrdersHelper();
        if (graphType.equals("dao"))
        	request.setAttribute(GRAPH, daoh.generateDollarsAndOrdersGraph(prevDateString, currDateString));        	
        if (graphType.equals("avg"))
        	request.setAttribute(GRAPH, daoh.generateAvgDollarsPerOrderGraph(prevDateString, currDateString));

		return actionForward;
	}
}

