/* Generated by Together */

package com.bos.actions;
//	java

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Session;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bcop.arch.logger.Logger;
import com.bos.arch.HibernateUtil;

/**
 * This action class is used for the Main screen.<Br>
 */

public class LoadTestStatusAction extends BaseAction {


	static {
		logger =
			(Logger) Logger.getLogger(ViewLoadTestAction.class.getName());
	}
	
	private static final String UPDATE_LOAD_TESTS ="Update LoadTests set Status=? where LoadTest_ID=?";
	
	/**
	 * Process the specified HTTP request, and create the corresponding HTTP
	 * response (or forward to another web component that will create it).
	 * Return an <code>ActionForward</code> instance describing where and how
	 * control should be forwarded, or <code>null</code> if the response has already been completed.
	 * @param mapping    - The ActionMapping used to select this instance
	 * @param actionForm - The optional ActionForm bean for this request (if any)
	 * @param request    - The HTTP request we are processing
	 * @param response   - The HTTP response we are creating
	 * @exception Exception if business logic throws an exception
	 * @return - returns the ActionForward.
	 */
	public ActionForward processAction(
	ActionMapping mapping,
	ActionForm actionForm,
	HttpServletRequest request,
	HttpServletResponse response) {
		ActionForward actionForward=null;
		actionForward = mapping.findForward("success");
		String sLoadTestID = request.getParameter("LoadTestID");
		String sStatus = request.getParameter("status");
        
        
		if(sLoadTestID == null || sStatus == null ){
			return actionForward;
		}else if(!sStatus.equalsIgnoreCase("Keep") && !sStatus.equalsIgnoreCase("Remove")){
		    return actionForward;
		}else{
		
			try {
				Session sess = HibernateUtil.currentSession();
				Connection con = sess.connection();
				PreparedStatement pstmt = con.prepareStatement(UPDATE_LOAD_TESTS);
				pstmt.setInt(2,Integer.parseInt(sLoadTestID));
				pstmt.setString(1,sStatus);
				pstmt.execute();
			} catch (HibernateException e) {
                
				e.printStackTrace();
			}catch (SQLException e){
				e.printStackTrace();
			}finally{
				try {
					HibernateUtil.closeSession();
				} catch (HibernateException e1) {
					e1.printStackTrace();
				}
			}
        	
		}
        
        

		return actionForward;
	}
}


