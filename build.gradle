/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'i0360b6' at '3/11/14 9:01 AM' with Gradle 1.10
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.10/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.6
//targetCompatibility = 1.7
version = 1.1
group = "pulse"

buildscript {
// In this section you declare where to find the dependencies of your project
    repositories {
        // Use 'maven central' for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        mavenCentral()
        mavenLocal()
//        maven { url "http://repo1.maven.org/maven2/"}
        maven { url "http://repository.jboss.org/nexus/content/repositories/deprecated" }
        maven {url "file://localhost/tmp/myRepo/"}
    }
}

allprojects {
// In this section you declare where to find the dependencies of your project
    repositories {
        // Use 'maven central' for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        def localRepoURL = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath

        mavenCentral()
        mavenLocal()
        maven { url "http://repository.jboss.org/nexus/content/repositories/deprecated" }
        maven {url localRepoURL}

    }
}


// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile project('LiveLogParserBeans')

    compile 'org.jsoup:jsoup:1.7.2'
    compile 'joda-time:joda-time:2.1'
    compile 'org.yaml:snakeyaml:1.10'
    compile 'org.apache.commons:commons-lang3:3.2.1'
    compile 'commons-logging:commons-logging:1.1.1'
    compile 'log4j:log4j:1.2.17'
    compile 'commons-pool:commons-pool:1.6'
    compile 'commons-digester:commons-digester:1.8'
    compile 'commons-collections:commons-collections:3.2.1'
    compile 'commons-codec:commons-codec:1.4'
    compile 'org.postgresql:postgresql:9.3-1100-jdbc4'
    compile 'concurrent:concurrent:1.3.4'
    compile 'com.lmax:disruptor:3.2.0'
    compile 'commons-beanutils:commons-beanutils:1.8.0'
    compile 'javax.activation:activation:1.1'
    compile 'javax.mail:mail:1.4'
    compile 'apache-oro:jakarta-oro:2.0.8'
    compile 'commons-dbcp:commons-dbcp:1.4'

    compile files('jars/coloradoER.jar', 'jars/jgroups.jar', 'jars/trull.jar', 'jars/mygraph.jar', 'jars/bos-common-utilities.jar', 'jars/cache.jar')
    compile files('jars/ojdbc5.jar')

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile "junit:junit:4.11"
}

sourceSets {
    main {
        java {
            srcDir 'java'
        }
        resources {
            srcDir 'java'
        }
    }
}

//task copyMiscellaneousToBuildDir(type: Copy) {
//    from "$project.projectDir/java"
//    into "$project.buildDir"
//    include "*.properties"
//    include "*.yml"
//    logger.warn("copyMiscellaneousToBuildDir")
//}

//task buildLiveLogParserBeansJar(type: Jar, dependsOn: 'compileJava') {
//    baseName = "LiveLogParserBeans"
//    from sourceSets.main.output
//    include "com/bos/art/logParser/broadcast/beans/*/**"
//    logger.warn("buildLiveLogParserBeansJar")
//}

jar {
    baseName = "LiveLogParser"
}

task buildLiveLogParserJar(type: Jar, dependsOn: 'copyMiscellaneousToBuildDir') {
    baseName = "LiveLogParser"

    from(sourceSets.main.output) {
        //include "**/*.class"
    }

    logger.warn("$project.buildDir")
    from("$project.buildDir") {
        include "**/*.properties"
        include "*.yml"
        includeEmptyDirs = false
    }
    logger.warn("buildLiveLogParserJar")
}

buildLiveLogParserJar << {
//    buildLiveLogParserBeansJar.execute()
    logger.warn("buildLiveLogParserJar")
}

task copyDeployFilestoDestination(type: Copy) {
    if (project.hasProperty('target')) {
        logger.warn("target: $target" )

        from "$project.buildDir/libs/LiveLogParser-1.1.jar"
        into "$target/dist"
        // copy jars
        copy {
            into "$target/jars"
            from configurations.runtime
        }

        copy {
            from "$project.projectDir/jars"
            into "$target/jars"
            include '**/*.jar'
        }

        // copy miscellaneuos
        copy {
            from "$project.projectDir"
            into "$target"
            include "*.sh"
            include "*.properties"
            include "*.xml"
            include "*.yml"
        }
    }
    logger.warn("copyDeployFilestoDestination")

}

build.doLast {
    //buildLiveLogParserJar.execute()
//    copyMiscellaneousToBuildDir.execute()
    logger.warn("build.doLast")
}

task deployCodeFromExport(dependsOn: 'build') {
    copyDeployFilestoDestination.execute()
}

